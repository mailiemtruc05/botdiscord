import discord
import asyncio
import os
import random
import re
from dotenv import load_dotenv
from discord.ext import commands
from datetime import datetime, timedelta
from discord.ui import View, Button
from flask import Flask
from threading import Thread
from discord.ui import View, Select
from datetime import datetime, timedelta, timezone

load_dotenv()  # ƒê·ªçc file .env
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True

bot = commands.Bot(command_prefix="ow!", intents=intents)

MEM_ROLE_NAME = "MEM"
DEV_ROLE_NAME = "DEV"
CATEGORY_BUY = "Ticket Mua H√†ng"
CATEGORY_SUPPORT = "Ticket H·ªó tr·ª£/B·∫£o H√†nh"

# L∆∞u giveaway ƒëang ho·∫°t ƒë·ªông ho·∫∑c c√≥ th·ªÉ reroll
giveaway_views = {}          # C√°c giveaway ƒëang di·ªÖn ra
ended_giveaways = {}         # C√°c giveaway ƒë√£ k·∫øt th√∫c
VN_TZ = timezone(timedelta(hours=7))

class TicketView(View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="Mua H√†ng", style=discord.ButtonStyle.green, custom_id="buy")
    async def buy_button(self, interaction: discord.Interaction, button: Button):
        await create_ticket(interaction, "mua-hang", CATEGORY_BUY)

    @discord.ui.button(label="H·ªó Tr·ª£/B·∫£o H√†nh", style=discord.ButtonStyle.red, custom_id="support")
    async def support_button(self, interaction: discord.Interaction, button: Button):
        await create_ticket(interaction, "ho-tro", CATEGORY_SUPPORT)

async def create_ticket(interaction: discord.Interaction, ticket_type: str, category_name: str):
    guild = interaction.guild
    member = interaction.user

    # Ki·ªÉm tra role MEM
    mem_role = discord.utils.get(guild.roles, name=MEM_ROLE_NAME)
    if mem_role not in member.roles:
        return await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn m·ªü ticket.", ephemeral=True)

    # Ki·ªÉm tra xem ƒë√£ c√≥ ticket ch∆∞a
    for channel in guild.text_channels:
        if (channel.name.startswith("üéü‚îÉmua-hang") or channel.name.startswith("üéü‚îÉho-tro")) and channel.topic == f"user:{member.id}":
            return await interaction.response.send_message("B·∫°n ƒë√£ c√≥ m·ªôt ticket ƒëang m·ªü.", ephemeral=True)

    # T·∫°o category n·∫øu ch∆∞a c√≥
    category = discord.utils.get(guild.categories, name=category_name)
    if category is None:
        category = await guild.create_category(category_name)

    # T·∫°o permission cho channel
    overwrites = {
        guild.default_role: discord.PermissionOverwrite(view_channel=False),
        member: discord.PermissionOverwrite(view_channel=True, send_messages=True),
    }

    dev_role = discord.utils.get(guild.roles, name=DEV_ROLE_NAME)
    if dev_role:
        overwrites[dev_role] = discord.PermissionOverwrite(view_channel=True, send_messages=True)

    # T·∫°o ticket channel v√† ƒë√°nh d·∫•u topic ƒë·ªÉ d·ªÖ ki·ªÉm tra
    ticket_channel = await guild.create_text_channel(
        name=f"üéü‚îÉ{ticket_type}-{member.name}",
        category=category,
        overwrites=overwrites,
        topic=f"user:{member.id}"
    )

    await ticket_channel.send(
        f"{member.mention} ƒë√£ m·ªü ticket `{ticket_type.replace('-', ' ').title()}`. <@&1351227654782714040> s·∫Ω h·ªó tr·ª£ b·∫°n."
    )

    embed = discord.Embed(
    title="Vui L√≤ng Ch·ªù DEV X√≠u Nh√©.\nDEV S·∫Ω Tr·∫£ L·ªùi Nhanh Nh·∫•t C√≥ Th·ªÉ ·∫†",
    color=discord.Color.blue()
    )
    embed.set_thumbnail(url="https://media.discordapp.net/attachments/1351234840749670430/1351423170443477023/logo2.png?ex=68222c28&is=6820daa8&hm=a2256de50600ffc0074e82e69fa2887477c9055c4b0f7e6c03fd0e4a179abb1b&=&format=webp&quality=lossless")
    embed.set_image(url="https://media.discordapp.net/attachments/1351234840749670430/1371308366030176377/ow.gif?ex=6822a9f0&is=68215870&hm=a521cfdb679132bbf79ebe91a08a52b149a81299fa1c396eb92882f679203eb9&=")  # ƒë·ªïi link ·∫£nh t√πy b·∫°n

    await ticket_channel.send(embed=embed, view=CloseTicketView())


    await interaction.response.send_message(f"Ticket c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o: {ticket_channel.mention}", ephemeral=True)


class CloseTicketView(View):
    def __init__(self):
        super().__init__(timeout=None)
        # ‚ùå X√ìA D√íNG N√ÄY V√å ƒê√É T·∫†O BUTTON B·∫∞NG DECORATOR ·ªû D∆Ø·ªöI
        # self.add_item(Button(label="ƒê√≥ng Ticket", style=discord.ButtonStyle.danger, custom_id="close_ticket"))

    @discord.ui.button(label="ƒê√≥ng Ticket", style=discord.ButtonStyle.danger, custom_id="close_ticket")
    async def close_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        dev_role = discord.utils.get(interaction.guild.roles, name=DEV_ROLE_NAME)
        if dev_role not in interaction.user.roles:
            return await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë√≥ng ticket n√†y.", ephemeral=True)

        await interaction.response.send_message("Ticket s·∫Ω b·ªã ƒë√≥ng sau 5 gi√¢y...", ephemeral=False)
        await asyncio.sleep(5)
        await interaction.channel.delete()

@bot.command()
@commands.has_role(DEV_ROLE_NAME)
async def sendticket(ctx):
    embed = discord.Embed(
        title="Ticket H·ªó Tr·ª£",
        description="N·∫øu b·∫°n c·∫ßn mua h√†ng ho·∫∑c h·ªó tr·ª£, h√£y b·∫•m v√†o c√°c n√∫t b√™n d∆∞·ªõi.\n**VUI L√íNG KH√îNG SPAM TICKET**",
        color=discord.Color.blue()
    )
    embed.set_thumbnail(url="https://media.discordapp.net/attachments/1351234840749670430/1351423170443477023/logo2.png?ex=68222c28&is=6820daa8&hm=a2256de50600ffc0074e82e69fa2887477c9055c4b0f7e6c03fd0e4a179abb1b&=&format=webp&quality=lossless")
    embed.set_image(url="https://media.discordapp.net/attachments/1351234840749670430/1371308366030176377/ow.gif?ex=6822a9f0&is=68215870&hm=a521cfdb679132bbf79ebe91a08a52b149a81299fa1c396eb92882f679203eb9&=")  # ƒë·ªïi link ·∫£nh t√πy b·∫°n

    await ctx.send(embed=embed, view=TicketView())
    await ctx.message.delete(delay=5)

@bot.command()
@commands.has_role(DEV_ROLE_NAME)
async def close(ctx):
    if ctx.channel.category and ctx.channel.category.name in [CATEGORY_BUY, CATEGORY_SUPPORT]:
        await ctx.send("ƒê√≥ng ticket...")
        await ctx.channel.delete()
    else:
        await ctx.send("L·ªánh n√†y ch·ªâ d√πng trong ticket.")

#-------------------------------------------------My Help-----------------------------------------------------------
@bot.command(name="myhelp")
@commands.has_role(DEV_ROLE_NAME)
async def help_command(ctx):
    # X√≥a l·ªánh g·ªçi !help sau 5 gi√¢y
    await ctx.message.delete(delay=5)
    
    embed = discord.Embed(
        title="üìú C√°c l·ªánh hi·ªán c√≥:",
        color=discord.Color.blue()
    )
    
    embed.add_field(name="ow!myhelp", value="Hi·ªán danh s√°ch c√°c l·ªánh c·ªßa bot OW Support (Admin)", inline=False)
    embed.add_field(name="ow!banggia", value="G·ª≠i b·∫£ng gi√° v√†o k√™nh B·∫£ng Gi√° (Admin)", inline=False)
    embed.add_field(name="ow!bg <t√™n d·ªãch v·ª•>", value="G·ª≠i c√°c b·∫£n gi√° ri√™ng l·∫ª trong ticket (Admin)", inline=False)
    embed.add_field(name="ow!giveaway <th·ªùi gian> <ph·∫ßn th∆∞·ªüng>", value="T·∫°o giveaway (Admin)", inline=False)
    embed.add_field(name="ow!list_giveaways", value="Xem danh s√°ch giveaway (Admin)", inline=False)
    embed.add_field(name="ow!endgiveaway <message_id>", value="K·∫øt th√∫c giveaway ngay l·∫≠p t·ª©c (Admin)", inline=False)
    embed.add_field(name="ow!reroll <message_id>", value="Random l·∫°i ng∆∞·ªùi tr√∫ng th∆∞·ªüng (Admin)", inline=False)
    embed.add_field(name="ow!thanhtoan <s·ªë ti·ªÅn> <n·ªôi dung>", value="T·∫°o m√£ QR theo n·ªôi dung, ti·ªÅn (Admin)", inline=False)
    embed.add_field(name="ow!sendticket", value="G·ª≠i ticket v√†o k√™nh (Admin)", inline=False)
    embed.add_field(name="ow!adduser @user", value="Th√™m ng∆∞·ªùi v√†o ticket (Admin)", inline=False)
    embed.add_field(name="ow!removeuser @user", value="X√≥a ng∆∞·ªùi ra kh·ªèi ticket (Admin)", inline=False)
    embed.add_field(name="ow!clear <s·ªë l∆∞·ª£ng>", value="X√≥a tin nh·∫Øn theo s·ªë l∆∞·ª£ng (Admin)", inline=False)
    embed.add_field(name="ow!clearallhard", value="X√≥a s·∫°ch k√™nh (Admin)", inline=False)
    
    # Th√™m ·∫£nh v√†o embed (thay link ·∫£nh th√†nh c·ªßa b·∫°n)
    embed.set_image(url="https://media.discordapp.net/attachments/1351234840749670430/1371308366030176377/ow.gif")
    
    await ctx.send(embed=embed)

#------------------------------------------------------------------------------------------------------------

#---------------------------------------------THANH TO√ÅN---------------------------------------------------------------
@bot.command()
@commands.has_role(DEV_ROLE_NAME)
async def thanhtoan(ctx, *, args: str):
    await ctx.message.delete(delay=5)

    if ctx.channel.category and ctx.channel.category.name in [CATEGORY_BUY, CATEGORY_SUPPORT]:
        bank_code = "VCB"
        account_no = "1034298524"
        account_name = "MAI LIEM TRUC"

        # args c√≥ th·ªÉ l√† "1000000 N·ªôi dung" ho·∫∑c "N·ªôi dung"
        parts = args.split(' ', 1)  # t√°ch 1 l·∫ßn, ph·∫ßn ƒë·∫ßu c√≥ th·ªÉ l√† s·ªë ti·ªÅn

        if len(parts) == 0:
            return await ctx.send("‚ùå Vui l√≤ng nh·∫≠p n·ªôi dung ho·∫∑c s·ªë ti·ªÅn v√† n·ªôi dung.")

        try:
            sotien = int(parts[0].replace(',', ''))  # c·ªë g·∫Øng parse s·ªë ti·ªÅn ƒë·∫ßu ti√™n
            loi_nhan = parts[1] if len(parts) > 1 else ""
            has_amount = True
        except ValueError:
            sotien = None
            loi_nhan = args
            has_amount = False

        loi_nhan_encoded = loi_nhan.replace(" ", "+")
        account_name_encoded = account_name.replace(" ", "+")

        if has_amount:
            qr_url = (
                f"https://img.vietqr.io/image/{bank_code}-{account_no}-compact.png"
                f"?amount={sotien}&addInfo={loi_nhan_encoded}&accountName={account_name_encoded}"
            )
            note = f"S·ªë Ti·ªÅn:\n{sotien:,} VND\n\n"
        else:
            qr_url = (
                f"https://img.vietqr.io/image/{bank_code}-{account_no}-compact.png"
                f"?addInfo={loi_nhan_encoded}&accountName={account_name_encoded}"
            )
            note = "Kh√°ch h√†ng t·ª± nh·∫≠p s·ªë ti·ªÅn khi chuy·ªÉn.\n\n"

        info_block = (
            f"```ini\n"
            f"Ng√¢n h√†ng:\nVietcombank\n\n"
            f"S·ªë T√†i Kho·∫£n:\n{account_no}\n\n"
            f"Ch·ªß T√†i Kho·∫£n:\n{account_name}\n\n"
            f"{note}"
            f"N·ªôi dung chuy·ªÉn:\n{loi_nhan}\n\n"
            f"Ghi ch√∫:\nKh√°ch h√†ng vui l√≤ng g·ª≠i bill v√†o ticket.\n"
            f"```"
        )

        embed = discord.Embed(
            title="Th√¥ng Tin Thanh To√°n",
            description=info_block,
            color=discord.Color.green()
        )
        embed.set_image(url=qr_url)
        embed.set_footer(text="M·ªçi th·∫Øc m·∫Øc li√™n h·ªá OW.")

        await ctx.send(embed=embed)

    else:
        await ctx.send("L·ªánh n√†y ch·ªâ d√πng trong k√™nh ticket.")
#------------------------------------------------------------------------------------------------------------

#-------------------------------------------------Th√™m/X√≥a User Ticket--------------------------------------------------------------------
@bot.command(name="adduser")
@commands.has_role(DEV_ROLE_NAME)
async def add_user_to_ticket(ctx, member: discord.Member):
    # Ki·ªÉm tra xem c√≥ ph·∫£i ƒëang trong k√™nh ticket kh√¥ng
    if ctx.channel.category and ctx.channel.category.name in [CATEGORY_BUY, CATEGORY_SUPPORT]:
        # C·∫≠p nh·∫≠t permission cho user m·ªõi
        await ctx.channel.set_permissions(member, view_channel=True, send_messages=True)
        await ctx.send(f"‚úÖ ƒê√£ th√™m {member.mention} v√†o ticket.")
    else:
        await ctx.send("‚ùå L·ªánh n√†y ch·ªâ d√πng trong k√™nh ticket.")

    await ctx.message.delete(delay=5)


@bot.command(name="removeuser")
@commands.has_role(DEV_ROLE_NAME)
async def remove_user_from_ticket(ctx, member: discord.Member):
    if ctx.channel.category and ctx.channel.category.name in [CATEGORY_BUY, CATEGORY_SUPPORT]:
        await ctx.channel.set_permissions(member, overwrite=None)
        await ctx.send(f"üö´ ƒê√£ xo√° {member.mention} kh·ªèi ticket.")
    else:
        await ctx.send("‚ùå L·ªánh n√†y ch·ªâ d√πng trong k√™nh ticket.")

    await ctx.message.delete(delay=5)
#---------------------------------------------------------------------------------------------------------------------

#-------------------------------------------------Clear K√™nh--------------------------------------------------------------------
@bot.command(name="clearallhard")
@commands.has_role(DEV_ROLE_NAME)
async def clear_all_hard(ctx):
    channel = ctx.channel

    # X√≥a l·ªánh g·ªçi tr∆∞·ªõc
    try:
        await ctx.message.delete()
    except:
        pass

    # Clone v√† x√≥a k√™nh
    new_channel = await channel.clone(reason="Clear all messages")
    await channel.delete()

    # G·ª≠i th√¥ng b√°o v√† x√≥a n√≥ sau 5 gi√¢y
    msg = await new_channel.send("‚úÖ T·∫•t c·∫£ tin nh·∫Øn trong k√™nh ƒë√£ ƒë∆∞·ª£c x√≥a (k√™nh ƒë√£ ƒë∆∞·ª£c t·∫°o l·∫°i).")
    await asyncio.sleep(5)
    await msg.delete()


@bot.command(name="clear")
@commands.has_role(DEV_ROLE_NAME)
async def clear_messages(ctx, amount: int):
    # X√≥a c·∫£ tin nh·∫Øn g·ªçi l·ªánh => +1
    deleted = await ctx.channel.purge(limit=amount + 1)

    confirm_msg = await ctx.send(f"üßπ ƒê√£ x√≥a {len(deleted) - 1} tin nh·∫Øn.")
    await asyncio.sleep(5)
    await confirm_msg.delete()

    try:
        await ctx.message.delete(delay=5)
    except:
        pass

#---------------------------------------------------------------------------------------------------------------------

#--------------------------------------------B·∫¢NG GI√Å----------------------------------------------------------------
# B·∫¢NG GI√Å T·ª™NG D·ªäCH V·ª§
product_data = {
    "Auto Fram": 
    (
    "**üöÄ D·ªäCH V·ª§ AUTO FRAM ‚Äì Nhanh, M∆∞·ª£t, Hi·ªáu Qu·∫£**\n"
    "‚Ä¢ Key ‚îÇ15k/ng√†y | 90k/tu·∫ßn | 160k/th√°ng | 300k/vv\n"
    "‚Ä¢ Key vƒ©nh vi·ªÖn (full quy·ªÅn t·∫•t c·∫£ tool OW STORE) ‚îÇ1tr2\n"
    "‚Ä¢ Nh·∫≠n vi·∫øt Auto theo y√™u c·∫ßu ‚Äì c√° nh√¢n h√≥a 100%"
    ),

    "C√†y thu√™ GTA5VN": 
    (
    "**üéÆ C√ÄY THU√ä GTA5VN ‚Äì L√™n Level Kh√¥ng C·∫ßn C√†y**\n"
    "‚Ä¢ C√†y theo y√™u c·∫ßu ri√™ng\n"
    "‚Ä¢ SV2 t·ª´ LV0 ‚ûú LV25 ‚îÇCh·ªâ 90k"
    ),

    "Thi·∫øt k·∫ø ƒë·ªì h·ªça": 
    (
    "**üé® THI·∫æT K·∫æ ƒê·ªí H·ªåA ‚Äì ƒê·∫πp M·∫Øt, ƒê√∫ng Ch·∫•t B·∫°n**\n"
    "‚Ä¢ Nh·∫≠n v·∫Ω Logo, Banner, Poster, Social Post theo y√™u c·∫ßu"
    ),

    "Thi·∫øt k·∫ø Discord": 
    (
    "**ü§ñ DISCORD SETUP & CODE BOT T√ôY CH·ªàNH**\n"
    "‚Ä¢ Thi·∫øt k·∫ø server chuy√™n nghi·ªáp ‚îÇ50k\n"
    "‚Ä¢ Code bot theo y√™u c·∫ßu (ticket, QR, th·ªëng k√™...) ‚îÇ100k ‚Äì 500k"
    ),

    "Word/Excel/PowerPoint/Canva": 
    (
    "**üìÑ VƒÇN PH√íNG ‚Äì THI·∫æT K·∫æ TR√åNH CHI·∫æU ‚Äì CANVA**\n"
    "‚Ä¢ PowerPoint/Canva ‚îÇ8k/slide (gi·∫£m n·∫øu nhi·ªÅu)\n"
    "‚Ä¢ Word & Excel: t√πy n·ªôi dung & y√™u c·∫ßu"
    ),

    "C√†i ph·∫ßn m·ªÅm": 
    (
    "**üß© C√ÄI PH·∫¶N M·ªÄM B·∫¢N QUY·ªÄN ‚Äì SI√äU ∆ØU ƒê√ÉI**\n"
    "‚Ä¢ Adobe AI + Photoshop ‚îÇ150k tr·ªçn g√≥i\n"
    "‚Ä¢ Microsoft Office Full B·ªô ‚îÇ150k c√†i tr·ªçn ƒë·ªùi"
    ),

}


class BangGiaDropdown(discord.ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(label=label, description=f"Xem b·∫£ng gi√° {label}")
            for label in product_data.keys()
        ]
        super().__init__(
            placeholder="Ch·ªçn m·ªôt d·ªãch v·ª•...",
            min_values=1,
            max_values=1,
            options=options
        )

    async def callback(self, interaction: discord.Interaction):
        member = interaction.user
        has_role = any(role.name == MEM_ROLE_NAME for role in member.roles)

        if not has_role:
            await interaction.response.send_message(
                "‚ùå B·∫°n c·∫ßn c√≥ role MEM ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.", ephemeral=True
            )
            return

        selected = self.values[0]
        content = product_data[selected]
        embed = discord.Embed(
            title=f"B·∫£ng gi√°: {selected}",
            description=content,
            color=discord.Color.green()
        )
        embed.set_image(url="https://media.discordapp.net/attachments/1351234840749670430/1371308366030176377/ow.gif")
        await interaction.response.send_message(embed=embed, ephemeral=True)


class BangGiaView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(BangGiaDropdown())


@bot.command()
@commands.has_role(DEV_ROLE_NAME)
async def banggia(ctx):
    # T√¨m k√™nh b·∫£ng gi√° theo t√™n
    channel = discord.utils.get(ctx.guild.channels, name="üì∞‚îÇb·∫£ng-gi√°")
    if channel is None:
        await ctx.send("Kh√¥ng t√¨m th·∫•y k√™nh b·∫£ng gi√° üì∞‚îÇb·∫£ng-gi√°!")
        return

    embed = discord.Embed(
        title="üõí Menu OW STORE ‚Äì Xem L√† M√™, Mua L√† Ph√™",
        description="H√£y ch·ªçn d·ªãch v·ª• b·∫°n quan t√¢m b√™n d∆∞·ªõi ƒë·ªÉ xem chi ti·∫øt.\nNh·∫•n <#1351232807908675614> ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n nhanh ch√≥ng t·ª´ ƒë·ªôi ng≈© OW STORE.",
        color=discord.Color.purple()
    )
    embed.set_image(url="https://media.discordapp.net/attachments/1351234840749670430/1371308366030176377/ow.gif")
    embed.set_footer(text="DEV BY OW")

    await channel.send(embed=embed, view=BangGiaView())  # G·ª≠i embed v√†o k√™nh b·∫£ng gi√°
    await ctx.message.delete(delay=5)  # X√≥a l·ªánh ng∆∞·ªùi d√πng sau 5 gi√¢y


@bot.command()
@commands.has_role(DEV_ROLE_NAME)
async def bg(ctx, *, service: str = None):
    # Ki·ªÉm tra xem l·ªánh c√≥ ƒë∆∞·ª£c g·ªçi trong k√™nh thu·ªôc category ticket hay kh√¥ng
    if not (ctx.channel.category and ctx.channel.category.name in [CATEGORY_BUY, CATEGORY_SUPPORT]):
        await ctx.send("L·ªánh n√†y ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong k√™nh ticket.")
        return

    if not service:
        await ctx.send("Vui l√≤ng nh·∫≠p t√™n d·ªãch v·ª• c·∫ßn xem b·∫£ng gi√°. V√≠ d·ª•: `!bg autofram`")
        return

    service_lower = service.lower()

    matched_key = None
    for key in product_data.keys():
        if service_lower in key.lower():
            matched_key = key
            break

    if matched_key:
        embed = discord.Embed(
            title=f"B·∫£ng Gi√°: {matched_key}",
            description=product_data[matched_key],
            color=discord.Color.green()
        )
        embed.set_image(url="https://media.discordapp.net/attachments/1351234840749670430/1371308366030176377/ow.gif")
        await ctx.send(embed=embed)
    else:
        await ctx.send(f"Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• ph√π h·ª£p v·ªõi '{service}'. Vui l√≤ng th·ª≠ l·∫°i.")
    
    await ctx.message.delete(delay=5)
#------------------------------------------------------------------------------------------------------------

#--------------------------------------------------CH√ÄO M·ª™NG----------------------------------------------------------
@bot.event
async def on_member_join(member):
    # T√¨m k√™nh ch√†o m·ª´ng theo t√™n
    channel = discord.utils.get(member.guild.text_channels, name="üéâ‚îÇch√†o-m·ª´ng")
    if channel is None:
        return

    # Thay ID b√™n d∆∞·ªõi b·∫±ng ID th·∫≠t c·ªßa t·ª´ng k√™nh
    update_channel_id = 1351223923966083152  # üö®‚îÇupdate
    rule_channel_id = 1351226270414934091   # üìñ‚îÇlu·∫≠t-d·ªãch-v·ª•
    ticket_channel_id = 1351232807908675614 # üé´‚îÇticket
    price_channel_id = 1351224397427642490  # üì∞‚îÇb·∫£ng-gi√° (ID gi·∫£, thay b·∫±ng ID th·∫≠t)

    embed = discord.Embed(
        description=f"Ch√†o m·ª´ng {member.mention} ƒë√£ ƒë·∫øn v·ªõi **OW STORE**. Ch√∫ng t√¥i hy v·ªçng b·∫°n s·∫Ω h√†i l√≤ng khi ƒë·∫øn v·ªõi store c·ªßa ch√∫ng t√¥i.",
        color=discord.Color.blue()
    )

    embed.add_field(
        name="\u200b",
        value=f"‚Ä¢ H√£y xem k√™nh <#{update_channel_id}> ƒë·ªÉ nh·∫≠n th√¥ng b√°o m·ªói khi ch√∫ng t√¥i c√≥ thay ƒë·ªïi ho·∫∑c s·ª± ki·ªán h·∫•p d·∫´n.",
        inline=False
    )
    embed.add_field(
        name="\u200b",
        value=f"‚Ä¢ ƒê√¢y l√† lu·∫≠t khi s·ª≠ d·ª•ng d·ªãch v·ª• t·∫°i store c·ªßa ch√∫ng t√¥i <#{rule_channel_id}>.",
        inline=False
    )
    embed.add_field(
        name="\u200b",
        value=f"‚Ä¢ ƒê√¢y l√† n∆°i ƒë·ªÉ b·∫°n mua h√†ng ho·∫∑c c·∫ßn ch√∫ng t√¥i h·ªó tr·ª£ b·∫£o h√†nh <#{ticket_channel_id}>.",
        inline=False
    )
    embed.add_field(
        name="\u200b",
        value=f"‚Ä¢ ƒê√¢y l√† b·∫£ng gi√° d·ªãch v·ª• t·∫°i store c·ªßa ch√∫ng t√¥i <#{price_channel_id}>.",
        inline=False
    )

    embed.set_thumbnail(url="https://media.discordapp.net/attachments/1351234840749670430/1351423170443477023/logo2.png?ex=68222c28&is=6820daa8&hm=a2256de50600ffc0074e82e69fa2887477c9055c4b0f7e6c03fd0e4a179abb1b&=&format=webp&quality=lossless")
    embed.set_image(url="https://media.discordapp.net/attachments/1351234840749670430/1371308366030176377/ow.gif?ex=6822a9f0&is=68215870&hm=a521cfdb679132bbf79ebe91a08a52b149a81299fa1c396eb92882f679203eb9&=")  # ƒë·ªïi link ·∫£nh t√πy b·∫°n

    await channel.send(embed=embed)
#------------------------------------------------------------------------------------------------------------


#-----------------------------------------------GIVEAWAY-------------------------------------------------------------
class GiveawayView(View):
    def __init__(self, giveaway_message, end_callback=None):
        super().__init__(timeout=None)
        self.participants = set()
        self.giveaway_message = giveaway_message
        self.end_callback = end_callback

    @discord.ui.button(label="Tham gia Giveaway", style=discord.ButtonStyle.green, custom_id="giveaway_join")
    async def join_button(self, interaction: discord.Interaction, button: Button):
        user = interaction.user
        if user.id in self.participants:
            await interaction.response.send_message("B·∫°n ƒë√£ tham gia r·ªìi!", ephemeral=True)
        else:
            self.participants.add(user.id)
            await interaction.response.send_message("B·∫°n ƒë√£ tham gia giveaway!", ephemeral=True)
            await self.update_embed()

    async def update_embed(self):
        embed = self.giveaway_message.embeds[0]
        lines = embed.description.splitlines()

        # Lo·∫°i b·ªè d√≤ng c≈© n·∫øu ƒë√£ c√≥
        lines = [line for line in lines if not line.startswith("S·ªë ng∆∞·ªùi tham gia:")]

        # Th√™m d√≤ng m·ªõi hi·ªÉn th·ªã s·ªë ng∆∞·ªùi tham gia
        lines.insert(2, f"S·ªë ng∆∞·ªùi tham gia: **{len(self.participants)}**")

        embed.description = "\n".join(lines)
        await self.giveaway_message.edit(embed=embed, view=self)

    async def end_giveaway(self):
        if self.participants:
            participants = list(self.participants)
            while participants:
                winner_id = random.choice(participants)
                winner = self.giveaway_message.guild.get_member(winner_id)
                if winner:
                    # G·ª≠i tin nh·∫Øn ch√∫c m·ª´ng
                    try:
                        prize = self.giveaway_message.embeds[0].description.splitlines()[0].split("**")[1]
                    except Exception:
                        prize = "ph·∫ßn th∆∞·ªüng"
                    try:
                        await winner.send(
                            f"üéâ Ch√∫c m·ª´ng b·∫°n ƒë√£ th·∫Øng giveaway: **{prize}** üéâ"
                        )
                    except discord.Forbidden:
                        pass

                    await self.giveaway_message.channel.send(f"üéâ Giveaway k·∫øt th√∫c! Ng∆∞·ªùi th·∫Øng l√† {winner.mention} üéâ")
                    # X√≥a giveaway kh·ªèi b·ªô nh·ªõ v√¨ ƒë√£ c√≥ ng∆∞·ªùi th·∫Øng h·ª£p l·ªá
                    giveaway_views.pop(self.giveaway_message.id, None)
                    self.clear_items()
                    await self.giveaway_message.edit(view=None)
                    ended_giveaways[self.giveaway_message.id] = self
                    return
                else:
                    participants.remove(winner_id)

            # Kh√¥ng t√¨m ƒë∆∞·ª£c ng∆∞·ªùi th·∫Øng h·ª£p l·ªá (t·∫•t c·∫£ ng∆∞·ªùi tham gia kh√¥ng c√≤n trong server)
            await self.giveaway_message.channel.send(
                f"üéâ Giveaway k·∫øt th√∫c nh∆∞ng kh√¥ng th·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi th·∫Øng (kh√¥ng ai c√≤n trong server).\n"
                f"üëâ B·∫°n c√≥ th·ªÉ d√πng l·ªánh `ow!reroll {self.giveaway_message.id}` ƒë·ªÉ quay l·∫°i t·ª´ danh s√°ch ban ƒë·∫ßu."
            )
            # **Gi·ªØ giveaway trong giveaway_views ƒë·ªÉ reroll ƒë∆∞·ª£c**
            self.clear_items()
            await self.giveaway_message.edit(view=None)
            ended_giveaways[self.giveaway_message.id] = self
        else:
            # Kh√¥ng c√≥ ng∆∞·ªùi tham gia
            await self.giveaway_message.channel.send("Giveaway k·∫øt th√∫c nh∆∞ng kh√¥ng c√≥ ng∆∞·ªùi tham gia n√†o.")
            giveaway_views.pop(self.giveaway_message.id, None)
            self.clear_items()
            await self.giveaway_message.edit(view=None)
            ended_giveaways[self.giveaway_message.id] = self



def parse_time_string(time_str: str) -> int:
    time_units = {"d": 86400, "h": 3600, "m": 60, "s": 1}
    match = re.fullmatch(r"(\d+)([dhms])", time_str.lower())
    if not match:
        raise commands.BadArgument("ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá. D√πng v√≠ d·ª•: `1d`, `2h`, `30m`, `45s`")
    value, unit = match.groups()
    return int(value) * time_units[unit]

@bot.command()
@commands.has_role(DEV_ROLE_NAME)
async def giveaway(ctx, time_str: str, *, prize: str):
    await ctx.message.delete(delay=5)

    try:
        time_in_seconds = parse_time_string(time_str)
    except commands.BadArgument as e:
        return await ctx.send(str(e))

    end_time = datetime.now(VN_TZ) + timedelta(seconds=time_in_seconds)
    end_timestamp = int(end_time.timestamp())

    embed = discord.Embed(
        title="üéâ Giveaway ƒê√£ B·∫Øt ƒê·∫ßu! üéâ",
        description=f"Ph·∫ßn th∆∞·ªüng: **{prize}**\n"
                    f"K·∫øt th√∫c v√†o: <t:{end_timestamp}:F> (<t:{end_timestamp}:R>)\n"
                    "S·ªë ng∆∞·ªùi tham gia: **0**\n\n"
                    "Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ tham gia giveaway!",
        color=discord.Color.gold()
    )

    giveaway_message = await ctx.send(embed=embed, view=None)
    view = GiveawayView(giveaway_message)
    giveaway_views[giveaway_message.id] = view
    await giveaway_message.edit(view=view)

    await asyncio.sleep(time_in_seconds)
    await view.end_giveaway()

@bot.command()
@commands.has_role(DEV_ROLE_NAME)
async def reroll(ctx, message_id: int):
    await ctx.message.delete(delay=5)
    view = giveaway_views.get(message_id)
    if not view:
        return await ctx.send("Kh√¥ng t√¨m th·∫•y giveaway t∆∞∆°ng ·ª©ng ho·∫∑c ƒë√£ k·∫øt th√∫c.")

    participants = list(view.participants)
    if not participants:
        return await ctx.send("Kh√¥ng c√≥ ng∆∞·ªùi tham gia trong giveaway n√†y.")

    while participants:
        winner_id = random.choice(participants)
        winner = ctx.guild.get_member(winner_id)
        if winner:
            await ctx.send(f"Quay l·∫°i: Ng∆∞·ªùi th·∫Øng m·ªõi l√† {winner.mention} üéâ")
            try:
                await winner.send("B·∫°n ƒë√£ ƒë∆∞·ª£c ch·ªçn l·∫°i l√† ng∆∞·ªùi th·∫Øng giveaway!")
            except discord.Forbidden:
                pass
            return
        else:
            participants.remove(winner_id)

    await ctx.send("Kh√¥ng th·ªÉ t√¨m th·∫•y ng∆∞·ªùi n√†o ƒë·ªÉ ch·ªçn l·∫°i.")


@bot.command(name="list_giveaways")
@commands.has_role(DEV_ROLE_NAME)
async def list_giveaways(ctx):
    await ctx.message.delete(delay=5)
    active = []
    for view in giveaway_views.values():
        embed = view.giveaway_message.embeds[0]
        prize = embed.description.splitlines()[0].split("**")[1]
        end_line = [line for line in embed.description.splitlines() if "K·∫øt th√∫c v√†o" in line][0]
        active.append(f"- `{view.giveaway_message.id}` | üéÅ {prize} | {end_line}")

    ended = []
    for msg_id, view in ended_giveaways.items():
        embed = view.giveaway_message.embeds[0]
        prize = embed.description.splitlines()[0].split("**")[1]
        ended.append(f"- `{msg_id}` | üéÅ {prize}")

    embed = discord.Embed(title="üìã Danh s√°ch Giveaway", color=discord.Color.blurple())
    embed.add_field(name="üéØ ƒêang di·ªÖn ra", value="\n".join(active) or "Kh√¥ng c√≥", inline=False)
    embed.add_field(name="‚úÖ ƒê√£ k·∫øt th√∫c", value="\n".join(ended) or "Kh√¥ng c√≥", inline=False)
    await ctx.send(embed=embed)


@bot.command(name="endgiveaway")
@commands.has_role(DEV_ROLE_NAME)
async def end_giveaway_now(ctx, message_id: int):
    await ctx.message.delete(delay=5)
    view = giveaway_views.get(message_id)
    if not view:
        return await ctx.send("Kh√¥ng t√¨m th·∫•y giveaway ƒëang di·ªÖn ra v·ªõi ID n√†y.")

    await ctx.send(f"‚èπÔ∏è K·∫øt th√∫c giveaway `{message_id}` ngay l·∫≠p t·ª©c.")
    await view.end_giveaway()
#------------------------------------------------------------------------------------------------------------


@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingRole):
        await ctx.send("B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªÉ d√πng l·ªánh n√†y.")

@bot.event
async def on_ready():
    # Th√™m view t√πy ch·ªânh
    bot.add_view(TicketView())

    # C·∫≠p nh·∫≠t tr·∫°ng th√°i bot
    activity = discord.Activity(type=discord.ActivityType.watching, name="OW STORE - Xem L√† M√™, Mua L√† Ph√™üî•")
    await bot.change_presence(activity=activity)

    print(f'Bot is ready: {bot.user}')




app = Flask('')

@app.route('/')
def home():
    return "Bot is alive!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

keep_alive()
bot.run(os.getenv("DISCORD_TOKEN"))
